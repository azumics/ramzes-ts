"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var execa_1 = __importDefault(require("execa"));
var fs_extra_1 = __importDefault(require("fs-extra"));
var path = __importStar(require("path"));
var logger_1 = __importDefault(require("@wdio/logger"));
var webdriverio_1 = require("webdriverio");
var SelenoidStandaloneService = /** @class */ (function () {
    function SelenoidStandaloneService(serviceOptions) {
        this.options = __assign({ pathToBrowsersConfig: './browsers.json', skipAutoPullImages: false, selenoidContainerName: 'wdio_selenoid', terminateWdioOnError: true, selenoidVersion: 'latest-release', port: 4444 }, serviceOptions);
        this.log = logger_1.default('wdio-selenoid-standalone-service');
        // fix docker paths for windows/*nix
        var platform = process.platform;
        if (platform === 'win32') {
            this.dockerSocketPath = '//var/run/docker.sock';
            var rawBrowserPath = path.join(process.cwd(), this.options.pathToBrowsersConfig);
            this.selenoidBrowsersConfigPath = rawBrowserPath.replace('C', 'c').replace(/\\/g, '/');
        }
        else {
            this.dockerSocketPath = '/var/run/docker.sock';
            this.selenoidBrowsersConfigPath = path.join(process.cwd(), this.options.pathToBrowsersConfig);
        }
    }
    SelenoidStandaloneService.prototype.stopSelenoid = function () {
        return __awaiter(this, void 0, void 0, function () {
            var stdout, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.log.info('Stopping any running selenoid containers');
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, execa_1.default('docker', ['rm', '-f', this.options.selenoidContainerName])];
                    case 2:
                        stdout = (_a.sent()).stdout;
                        return [2 /*return*/, Promise.resolve(stdout)];
                    case 3:
                        error_1 = _a.sent();
                        return [2 /*return*/, Promise.resolve(error_1)];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    SelenoidStandaloneService.prototype.startSelenoid = function () {
        return __awaiter(this, void 0, void 0, function () {
            var dockerArgs, selenoidArgs, startArgs, stdout, error_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.log.info('Starting Selenoid Container');
                        dockerArgs = this.options.dockerArgs || [];
                        selenoidArgs = this.options.selenoidArgs || [];
                        startArgs = __spreadArrays([
                            'run',
                            '-d',
                            '--name',
                            this.options.selenoidContainerName,
                            '-p',
                            '4444:4444',
                            '-v',
                            this.dockerSocketPath + ":/var/run/docker.sock",
                            '-v',
                            path.dirname(this.selenoidBrowsersConfigPath) + "/:/etc/selenoid/:ro"
                        ], dockerArgs, [
                            "aerokube/selenoid:" + this.options.selenoidVersion
                        ], selenoidArgs);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, execa_1.default('docker', startArgs)];
                    case 2:
                        stdout = (_a.sent()).stdout;
                        return [2 /*return*/, Promise.resolve(stdout)];
                    case 3:
                        error_2 = _a.sent();
                        if (this.options.terminateWdioOnError === true) {
                            throw new webdriverio_1.SevereServiceError("Unable to start selenoid container \n" + error_2);
                        }
                        return [2 /*return*/, Promise.resolve(error_2)];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    SelenoidStandaloneService.prototype.verifySelenoidBrowserConfig = function () {
        return __awaiter(this, void 0, void 0, function () {
            var filePath;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, fs_extra_1.default.pathExists(this.selenoidBrowsersConfigPath)];
                    case 1:
                        filePath = _a.sent();
                        if (!filePath) {
                            this.log.error("Unable to find browsers.json at " + this.selenoidBrowsersConfigPath);
                            if (this.options.terminateWdioOnError === true) {
                                throw new webdriverio_1.SevereServiceError("Unable to find browsers.json at " + this.selenoidBrowsersConfigPath);
                            }
                        }
                        return [2 /*return*/, Promise.resolve()];
                }
            });
        });
    };
    SelenoidStandaloneService.prototype.doesImageExist = function (imageName) {
        return __awaiter(this, void 0, void 0, function () {
            var stdout, results, error_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        this.log.debug("Checking image " + imageName + " exists");
                        return [4 /*yield*/, execa_1.default('docker', ['image', 'ls', '-f', "reference=" + imageName])];
                    case 1:
                        stdout = (_a.sent()).stdout;
                        results = stdout.split('\n');
                        return [2 /*return*/, Promise.resolve(results.length >= 2)];
                    case 2:
                        error_3 = _a.sent();
                        this.log.error(error_3);
                        return [2 /*return*/, Promise.resolve(true)];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    SelenoidStandaloneService.prototype.pullRequiredBrowserFiles = function () {
        return __awaiter(this, void 0, void 0, function () {
            var selenoidConfig, browserImages_2, _i, browserImages_1, image, error_4;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 7, , 8]);
                        selenoidConfig = require(this.selenoidBrowsersConfigPath);
                        browserImages_2 = [];
                        Object.entries(selenoidConfig).forEach(function (_a) {
                            var _browserName = _a[0], browserConfig = _a[1];
                            Object.entries(browserConfig.versions).forEach(function (_a) {
                                var _version = _a[0], versionConfig = _a[1];
                                browserImages_2.push(versionConfig.image);
                            });
                        });
                        _i = 0, browserImages_1 = browserImages_2;
                        _a.label = 1;
                    case 1:
                        if (!(_i < browserImages_1.length)) return [3 /*break*/, 6];
                        image = browserImages_1[_i];
                        return [4 /*yield*/, this.doesImageExist(image)];
                    case 2:
                        if (!_a.sent()) return [3 /*break*/, 3];
                        this.log.info("Skipping pull. Image: " + image + " already exists");
                        return [3 /*break*/, 5];
                    case 3:
                        this.log.info("Pulling image " + image);
                        return [4 /*yield*/, execa_1.default('docker', ['pull', image])];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5:
                        _i++;
                        return [3 /*break*/, 1];
                    case 6: return [3 /*break*/, 8];
                    case 7:
                        error_4 = _a.sent();
                        this.log.error(error_4);
                        return [3 /*break*/, 8];
                    case 8: return [2 /*return*/, Promise.resolve()];
                }
            });
        });
    };
    SelenoidStandaloneService.prototype.pullRequiredSelenoidVersion = function () {
        return __awaiter(this, void 0, void 0, function () {
            var image, error_5;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        image = "aerokube/selenoid:" + this.options.selenoidVersion;
                        return [4 /*yield*/, this.doesImageExist(image)];
                    case 1:
                        if (!_a.sent()) return [3 /*break*/, 2];
                        this.log.info("Sipping pull.  Image " + image + " already exists");
                        return [3 /*break*/, 5];
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        this.log.info("Pulling selenoid image 'aerokube/selenoid:" + this.options.selenoidVersion + "'");
                        return [4 /*yield*/, execa_1.default('docker', ['pull', "aerokube/selenoid:" + this.options.selenoidVersion])];
                    case 3:
                        _a.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        error_5 = _a.sent();
                        this.log.error(error_5);
                        return [3 /*break*/, 5];
                    case 5: return [2 /*return*/, Promise.resolve()];
                }
            });
        });
    };
    SelenoidStandaloneService.prototype.onPrepare = function (_config, _capabilities) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: 
                    // kill existing selenoid if running
                    return [4 /*yield*/, this.stopSelenoid()];
                    case 1:
                        // kill existing selenoid if running
                        _a.sent();
                        // check browsers file
                        return [4 /*yield*/, this.verifySelenoidBrowserConfig()];
                    case 2:
                        // check browsers file
                        _a.sent();
                        if (!!this.options.skipAutoPullImages) return [3 /*break*/, 5];
                        // pull any containers listed in the browsers.json
                        return [4 /*yield*/, this.pullRequiredBrowserFiles()];
                    case 3:
                        // pull any containers listed in the browsers.json
                        _a.sent();
                        // pull selenoid if needed
                        return [4 /*yield*/, this.pullRequiredSelenoidVersion()];
                    case 4:
                        // pull selenoid if needed
                        _a.sent();
                        _a.label = 5;
                    case 5: 
                    // run container
                    return [2 /*return*/, this.startSelenoid()];
                }
            });
        });
    };
    SelenoidStandaloneService.prototype.onComplete = function (_exitCode, _config, _capabilities) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.stopSelenoid()];
            });
        });
    };
    return SelenoidStandaloneService;
}());
exports.default = SelenoidStandaloneService;
//# sourceMappingURL=Launcher.js.map